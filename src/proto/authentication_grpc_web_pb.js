/**
 * @fileoverview gRPC-Web generated client stub for authentication
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.26.1
// source: authentication.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


// var google_api_annotations_pb = require('./google/api/annotations_pb.js')
const proto = {};
proto.authentication = require('./authentication_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.authentication.AuthenticationServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.authentication.AuthenticationServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.authentication.RequestPreRegister,
 *   !proto.authentication.Response>}
 */
const methodDescriptor_AuthenticationService_PreRegister = new grpc.web.MethodDescriptor(
  '/authentication.AuthenticationService/PreRegister',
  grpc.web.MethodType.UNARY,
  proto.authentication.RequestPreRegister,
  proto.authentication.Response,
  /**
   * @param {!proto.authentication.RequestPreRegister} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.authentication.Response.deserializeBinary
);


/**
 * @param {!proto.authentication.RequestPreRegister} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.authentication.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.authentication.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.authentication.AuthenticationServiceClient.prototype.preRegister =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/authentication.AuthenticationService/PreRegister',
      request,
      metadata || {},
      methodDescriptor_AuthenticationService_PreRegister,
      callback);
};


/**
 * @param {!proto.authentication.RequestPreRegister} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.authentication.Response>}
 *     Promise that resolves to the response
 */
proto.authentication.AuthenticationServicePromiseClient.prototype.preRegister =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/authentication.AuthenticationService/PreRegister',
      request,
      metadata || {},
      methodDescriptor_AuthenticationService_PreRegister);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.authentication.RequestRegister,
 *   !proto.authentication.Response>}
 */
const methodDescriptor_AuthenticationService_Register = new grpc.web.MethodDescriptor(
  '/authentication.AuthenticationService/Register',
  grpc.web.MethodType.UNARY,
  proto.authentication.RequestRegister,
  proto.authentication.Response,
  /**
   * @param {!proto.authentication.RequestRegister} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.authentication.Response.deserializeBinary
);


/**
 * @param {!proto.authentication.RequestRegister} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.authentication.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.authentication.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.authentication.AuthenticationServiceClient.prototype.register =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/authentication.AuthenticationService/Register',
      request,
      metadata || {},
      methodDescriptor_AuthenticationService_Register,
      callback);
};


/**
 * @param {!proto.authentication.RequestRegister} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.authentication.Response>}
 *     Promise that resolves to the response
 */
proto.authentication.AuthenticationServicePromiseClient.prototype.register =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/authentication.AuthenticationService/Register',
      request,
      metadata || {},
      methodDescriptor_AuthenticationService_Register);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.authentication.RequestCustomerLogin,
 *   !proto.authentication.Response>}
 */
const methodDescriptor_AuthenticationService_CustomerLogin = new grpc.web.MethodDescriptor(
  '/authentication.AuthenticationService/CustomerLogin',
  grpc.web.MethodType.UNARY,
  proto.authentication.RequestCustomerLogin,
  proto.authentication.Response,
  /**
   * @param {!proto.authentication.RequestCustomerLogin} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.authentication.Response.deserializeBinary
);


/**
 * @param {!proto.authentication.RequestCustomerLogin} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.authentication.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.authentication.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.authentication.AuthenticationServiceClient.prototype.customerLogin =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/authentication.AuthenticationService/CustomerLogin',
      request,
      metadata || {},
      methodDescriptor_AuthenticationService_CustomerLogin,
      callback);
};


/**
 * @param {!proto.authentication.RequestCustomerLogin} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.authentication.Response>}
 *     Promise that resolves to the response
 */
proto.authentication.AuthenticationServicePromiseClient.prototype.customerLogin =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/authentication.AuthenticationService/CustomerLogin',
      request,
      metadata || {},
      methodDescriptor_AuthenticationService_CustomerLogin);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.authentication.RequestCustomerLoginVerify,
 *   !proto.authentication.Response>}
 */
const methodDescriptor_AuthenticationService_CustomerLoginVerify = new grpc.web.MethodDescriptor(
  '/authentication.AuthenticationService/CustomerLoginVerify',
  grpc.web.MethodType.UNARY,
  proto.authentication.RequestCustomerLoginVerify,
  proto.authentication.Response,
  /**
   * @param {!proto.authentication.RequestCustomerLoginVerify} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.authentication.Response.deserializeBinary
);


/**
 * @param {!proto.authentication.RequestCustomerLoginVerify} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.authentication.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.authentication.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.authentication.AuthenticationServiceClient.prototype.customerLoginVerify =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/authentication.AuthenticationService/CustomerLoginVerify',
      request,
      metadata || {},
      methodDescriptor_AuthenticationService_CustomerLoginVerify,
      callback);
};


/**
 * @param {!proto.authentication.RequestCustomerLoginVerify} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.authentication.Response>}
 *     Promise that resolves to the response
 */
proto.authentication.AuthenticationServicePromiseClient.prototype.customerLoginVerify =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/authentication.AuthenticationService/CustomerLoginVerify',
      request,
      metadata || {},
      methodDescriptor_AuthenticationService_CustomerLoginVerify);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.authentication.RequestAdminLogin,
 *   !proto.authentication.Response>}
 */
const methodDescriptor_AuthenticationService_AdminLogin = new grpc.web.MethodDescriptor(
  '/authentication.AuthenticationService/AdminLogin',
  grpc.web.MethodType.UNARY,
  proto.authentication.RequestAdminLogin,
  proto.authentication.Response,
  /**
   * @param {!proto.authentication.RequestAdminLogin} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.authentication.Response.deserializeBinary
);


/**
 * @param {!proto.authentication.RequestAdminLogin} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.authentication.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.authentication.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.authentication.AuthenticationServiceClient.prototype.adminLogin =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/authentication.AuthenticationService/AdminLogin',
      request,
      metadata || {},
      methodDescriptor_AuthenticationService_AdminLogin,
      callback);
};


/**
 * @param {!proto.authentication.RequestAdminLogin} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.authentication.Response>}
 *     Promise that resolves to the response
 */
proto.authentication.AuthenticationServicePromiseClient.prototype.adminLogin =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/authentication.AuthenticationService/AdminLogin',
      request,
      metadata || {},
      methodDescriptor_AuthenticationService_AdminLogin);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.authentication.RequestAnonymous,
 *   !proto.authentication.Response>}
 */
const methodDescriptor_AuthenticationService_AnonymousToken = new grpc.web.MethodDescriptor(
  '/authentication.AuthenticationService/AnonymousToken',
  grpc.web.MethodType.UNARY,
  proto.authentication.RequestAnonymous,
  proto.authentication.Response,
  /**
   * @param {!proto.authentication.RequestAnonymous} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.authentication.Response.deserializeBinary
);


/**
 * @param {!proto.authentication.RequestAnonymous} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.authentication.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.authentication.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.authentication.AuthenticationServiceClient.prototype.anonymousToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/authentication.AuthenticationService/AnonymousToken',
      request,
      metadata || {},
      methodDescriptor_AuthenticationService_AnonymousToken,
      callback);
};


/**
 * @param {!proto.authentication.RequestAnonymous} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.authentication.Response>}
 *     Promise that resolves to the response
 */
proto.authentication.AuthenticationServicePromiseClient.prototype.anonymousToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/authentication.AuthenticationService/AnonymousToken',
      request,
      metadata || {},
      methodDescriptor_AuthenticationService_AnonymousToken);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.authentication.RequestSessionRole,
 *   !proto.authentication.Response>}
 */
const methodDescriptor_AuthenticationService_SessionRole = new grpc.web.MethodDescriptor(
  '/authentication.AuthenticationService/SessionRole',
  grpc.web.MethodType.UNARY,
  proto.authentication.RequestSessionRole,
  proto.authentication.Response,
  /**
   * @param {!proto.authentication.RequestSessionRole} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.authentication.Response.deserializeBinary
);


/**
 * @param {!proto.authentication.RequestSessionRole} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.authentication.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.authentication.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.authentication.AuthenticationServiceClient.prototype.sessionRole =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/authentication.AuthenticationService/SessionRole',
      request,
      metadata || {},
      methodDescriptor_AuthenticationService_SessionRole,
      callback);
};


/**
 * @param {!proto.authentication.RequestSessionRole} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.authentication.Response>}
 *     Promise that resolves to the response
 */
proto.authentication.AuthenticationServicePromiseClient.prototype.sessionRole =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/authentication.AuthenticationService/SessionRole',
      request,
      metadata || {},
      methodDescriptor_AuthenticationService_SessionRole);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.authentication.RequestProfile,
 *   !proto.authentication.ResponseMainMenu>}
 */
const methodDescriptor_AuthenticationService_MainMenu = new grpc.web.MethodDescriptor(
  '/authentication.AuthenticationService/MainMenu',
  grpc.web.MethodType.UNARY,
  proto.authentication.RequestProfile,
  proto.authentication.ResponseMainMenu,
  /**
   * @param {!proto.authentication.RequestProfile} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.authentication.ResponseMainMenu.deserializeBinary
);


/**
 * @param {!proto.authentication.RequestProfile} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.authentication.ResponseMainMenu)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.authentication.ResponseMainMenu>|undefined}
 *     The XHR Node Readable Stream
 */
proto.authentication.AuthenticationServiceClient.prototype.mainMenu =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/authentication.AuthenticationService/MainMenu',
      request,
      metadata || {},
      methodDescriptor_AuthenticationService_MainMenu,
      callback);
};


/**
 * @param {!proto.authentication.RequestProfile} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.authentication.ResponseMainMenu>}
 *     Promise that resolves to the response
 */
proto.authentication.AuthenticationServicePromiseClient.prototype.mainMenu =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/authentication.AuthenticationService/MainMenu',
      request,
      metadata || {},
      methodDescriptor_AuthenticationService_MainMenu);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.authentication.RequestProfile,
 *   !proto.authentication.ResponseProfileCustomer>}
 */
const methodDescriptor_AuthenticationService_ProfileCustomer = new grpc.web.MethodDescriptor(
  '/authentication.AuthenticationService/ProfileCustomer',
  grpc.web.MethodType.UNARY,
  proto.authentication.RequestProfile,
  proto.authentication.ResponseProfileCustomer,
  /**
   * @param {!proto.authentication.RequestProfile} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.authentication.ResponseProfileCustomer.deserializeBinary
);


/**
 * @param {!proto.authentication.RequestProfile} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.authentication.ResponseProfileCustomer)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.authentication.ResponseProfileCustomer>|undefined}
 *     The XHR Node Readable Stream
 */
proto.authentication.AuthenticationServiceClient.prototype.profileCustomer =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/authentication.AuthenticationService/ProfileCustomer',
      request,
      metadata || {},
      methodDescriptor_AuthenticationService_ProfileCustomer,
      callback);
};


/**
 * @param {!proto.authentication.RequestProfile} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.authentication.ResponseProfileCustomer>}
 *     Promise that resolves to the response
 */
proto.authentication.AuthenticationServicePromiseClient.prototype.profileCustomer =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/authentication.AuthenticationService/ProfileCustomer',
      request,
      metadata || {},
      methodDescriptor_AuthenticationService_ProfileCustomer);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.authentication.RequestProfile,
 *   !proto.authentication.ResponseProfileAdmin>}
 */
const methodDescriptor_AuthenticationService_ProfileAdmin = new grpc.web.MethodDescriptor(
  '/authentication.AuthenticationService/ProfileAdmin',
  grpc.web.MethodType.UNARY,
  proto.authentication.RequestProfile,
  proto.authentication.ResponseProfileAdmin,
  /**
   * @param {!proto.authentication.RequestProfile} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.authentication.ResponseProfileAdmin.deserializeBinary
);


/**
 * @param {!proto.authentication.RequestProfile} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.authentication.ResponseProfileAdmin)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.authentication.ResponseProfileAdmin>|undefined}
 *     The XHR Node Readable Stream
 */
proto.authentication.AuthenticationServiceClient.prototype.profileAdmin =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/authentication.AuthenticationService/ProfileAdmin',
      request,
      metadata || {},
      methodDescriptor_AuthenticationService_ProfileAdmin,
      callback);
};


/**
 * @param {!proto.authentication.RequestProfile} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.authentication.ResponseProfileAdmin>}
 *     Promise that resolves to the response
 */
proto.authentication.AuthenticationServicePromiseClient.prototype.profileAdmin =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/authentication.AuthenticationService/ProfileAdmin',
      request,
      metadata || {},
      methodDescriptor_AuthenticationService_ProfileAdmin);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.authentication.RequestResetPassword,
 *   !proto.authentication.Response>}
 */
const methodDescriptor_AuthenticationService_ResetPassword = new grpc.web.MethodDescriptor(
  '/authentication.AuthenticationService/ResetPassword',
  grpc.web.MethodType.UNARY,
  proto.authentication.RequestResetPassword,
  proto.authentication.Response,
  /**
   * @param {!proto.authentication.RequestResetPassword} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.authentication.Response.deserializeBinary
);


/**
 * @param {!proto.authentication.RequestResetPassword} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.authentication.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.authentication.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.authentication.AuthenticationServiceClient.prototype.resetPassword =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/authentication.AuthenticationService/ResetPassword',
      request,
      metadata || {},
      methodDescriptor_AuthenticationService_ResetPassword,
      callback);
};


/**
 * @param {!proto.authentication.RequestResetPassword} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.authentication.Response>}
 *     Promise that resolves to the response
 */
proto.authentication.AuthenticationServicePromiseClient.prototype.resetPassword =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/authentication.AuthenticationService/ResetPassword',
      request,
      metadata || {},
      methodDescriptor_AuthenticationService_ResetPassword);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.authentication.RequestVerify,
 *   !proto.authentication.Response>}
 */
const methodDescriptor_AuthenticationService_Verify = new grpc.web.MethodDescriptor(
  '/authentication.AuthenticationService/Verify',
  grpc.web.MethodType.UNARY,
  proto.authentication.RequestVerify,
  proto.authentication.Response,
  /**
   * @param {!proto.authentication.RequestVerify} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.authentication.Response.deserializeBinary
);


/**
 * @param {!proto.authentication.RequestVerify} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.authentication.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.authentication.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.authentication.AuthenticationServiceClient.prototype.verify =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/authentication.AuthenticationService/Verify',
      request,
      metadata || {},
      methodDescriptor_AuthenticationService_Verify,
      callback);
};


/**
 * @param {!proto.authentication.RequestVerify} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.authentication.Response>}
 *     Promise that resolves to the response
 */
proto.authentication.AuthenticationServicePromiseClient.prototype.verify =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/authentication.AuthenticationService/Verify',
      request,
      metadata || {},
      methodDescriptor_AuthenticationService_Verify);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.authentication.RequestVerifyAccount,
 *   !proto.authentication.Response>}
 */
const methodDescriptor_AuthenticationService_VerifyAccount = new grpc.web.MethodDescriptor(
  '/authentication.AuthenticationService/VerifyAccount',
  grpc.web.MethodType.UNARY,
  proto.authentication.RequestVerifyAccount,
  proto.authentication.Response,
  /**
   * @param {!proto.authentication.RequestVerifyAccount} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.authentication.Response.deserializeBinary
);


/**
 * @param {!proto.authentication.RequestVerifyAccount} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.authentication.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.authentication.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.authentication.AuthenticationServiceClient.prototype.verifyAccount =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/authentication.AuthenticationService/VerifyAccount',
      request,
      metadata || {},
      methodDescriptor_AuthenticationService_VerifyAccount,
      callback);
};


/**
 * @param {!proto.authentication.RequestVerifyAccount} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.authentication.Response>}
 *     Promise that resolves to the response
 */
proto.authentication.AuthenticationServicePromiseClient.prototype.verifyAccount =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/authentication.AuthenticationService/VerifyAccount',
      request,
      metadata || {},
      methodDescriptor_AuthenticationService_VerifyAccount);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.authentication.RequestChangePassword,
 *   !proto.authentication.Response>}
 */
const methodDescriptor_AuthenticationService_ChangePassword = new grpc.web.MethodDescriptor(
  '/authentication.AuthenticationService/ChangePassword',
  grpc.web.MethodType.UNARY,
  proto.authentication.RequestChangePassword,
  proto.authentication.Response,
  /**
   * @param {!proto.authentication.RequestChangePassword} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.authentication.Response.deserializeBinary
);


/**
 * @param {!proto.authentication.RequestChangePassword} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.authentication.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.authentication.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.authentication.AuthenticationServiceClient.prototype.changePassword =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/authentication.AuthenticationService/ChangePassword',
      request,
      metadata || {},
      methodDescriptor_AuthenticationService_ChangePassword,
      callback);
};


/**
 * @param {!proto.authentication.RequestChangePassword} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.authentication.Response>}
 *     Promise that resolves to the response
 */
proto.authentication.AuthenticationServicePromiseClient.prototype.changePassword =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/authentication.AuthenticationService/ChangePassword',
      request,
      metadata || {},
      methodDescriptor_AuthenticationService_ChangePassword);
};


module.exports = proto.authentication;

